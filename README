_       _   _   _   _       _       ____     
  |"|   U |"|u| | | \ |"|  U  /"\  uU |  _"\ u  
U | | u  \| |\| |<|  \| |>  \/ _ \/  \| |_) |/  
 \| |/__  | |_| |U| |\  |u  / ___ \   |  _ <    
  |_____|<<\___/  |_| \_|  /_/   \_\  |_| \_\   
  //  \\(__) )(   ||   \\,-.\\    >>  //   \\_  
 (_")("_)   (__)  (_")  (_/(__)  (__)(__)  (__) 

           Numeric arrays for Lua



LICENSE

    Copyright (C) 2012  Jonathan Zrake

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.



INTRODUCTION

Lunar ('lua' + 'array') is a numeric extension for the Lua
programming language. Its purpose is to provide numeric
arrays to Lua which behave just like numpy arrays, and are
just as fast (if not faster). It may be loaded as a Lua
module through a shared object file, or linked statically to
embed in an application.

Lunar's goals are to provide flexible and robust facilities
for the manipulation of multi-dimensional numeric arrays. It
is not intended to be a linear algebra or other scientific
computing library, but rather a direct extension to the
basic Lua language to include arrays that feel 'native' to
Lua. Thus it is more slender than the 'numlua' project. It
also differs from numlua in that it has no dependencies, and
features a portable and automatic build sequence.



FEATURES

* Arrays of arbitrary dimension are supported, however there
  is no support for slicing operations at this time.

* Vectorized arithmetic operations are fully supported, and
  are carried out entirely in C. These include addition,
  subtraction, multiplication, division, and exponentiation
  (through '^'). Mixed operations on scalar and array
  quantities work as expected. C casting rules are applied
  to binary operations between mixed array types.

* The C math library is exposed and overloaded through
  lunar. For example, lunar.asinh operates correctly on all
  lunar data types. Integral arrays are upcast to double
  precision, and complex arrays use the C complex math
  functions.

* Lunar provides 7 atomic data types: char, short, int,
  long, float, double, and complex. Complex values are all
  double precision, and are built by adding the imaginary
  unit to a number, e.g. z = 1 + 2*lunar.I is the complex
  number (1,2).



CONVENTIONS

Unlike Lua tables with numeric keys, lunar arrays start from
index 0. This is to be consistent with C, Python, and
numpy. The Luar C API provides functions for pushing new
lunar arrays onto the stack, and obtaining them from the
stack.



INSTALLATION

make
make tests
make install

TO specify the location of Lua header and library files, put
LUA_HOME=/path/to/lua at the end of the make command. 'make
install' creates lib and include directories locally. To
specify a different location, use
INSTALL_TOP=/path/to/lunar. To load lunar as a Lua
extension, set the environment variable as follows:

export LUA_CPATH=/path/to/lunar/lib/?.so



