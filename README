_       _   _   _   _       _       ____     
  |"|   U |"|u| | | \ |"|  U  /"\  uU |  _"\ u  
U | | u  \| |\| |<|  \| |>  \/ _ \/  \| |_) |/  
 \| |/__  | |_| |U| |\  |u  / ___ \   |  _ <    
  |_____|<<\___/  |_| \_|  /_/   \_\  |_| \_\   
  //  \\(__) )(   ||   \\,-.\\    >>  //   \\_  
 (_")("_)   (__)  (_")  (_/(__)  (__)(__)  (__) 

           Numeric arrays for Lua



LICENSE

    Copyright (C) 2012  Jonathan Zrake

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.



INTRODUCTION

Lunar ('lua' + 'array') is a numeric extension for the Lua programming
language. Its purpose is to provide numeric arrays to Lua which behave in the
same way, and with the same efficiency as numpy arrays. It may be loaded as a
Lua module through a shared object file, or linked statically to embed in an
application.


DATA TYPES

Lunar provides 7 atomic data types: char, short, int, long, float, double, and
complex. The internal C representation of these types is faithful to their
names, but Lua numbers are used on the Lua side for all but complex. Complex
values are provided by using the lunar.I imaginary unit, e.g. z = 1 + 2*lunar.I
is the complex number (1,2). All complex values use double precision.


INSTALLATION

make LUA_HOME=/path/to/lua/install
make install INSTALL_HOME=/path/to/lunar
make tests
