_       _   _   _   _       _       ____     
  |"|   U |"|u| | | \ |"|  U  /"\  uU |  _"\ u  
U | | u  \| |\| |<|  \| |>  \/ _ \/  \| |_) |/  
 \| |/__  | |_| |U| |\  |u  / ___ \   |  _ <    
  |_____|<<\___/  |_| \_|  /_/   \_\  |_| \_\   
  //  \\(__) )(   ||   \\,-.\\    >>  //   \\_  
 (_")("_)   (__)  (_")  (_/(__)  (__)(__)  (__) 

           Numeric arrays for Lua



LICENSE

    Copyright (C) 2012  Jonathan Zrake

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.



INTRODUCTION

Lunar ('lua' + 'array') is a numeric extension for the Lua
programming language. Its purpose is to provide numeric
arrays to Lua which behave just like numpy arrays, and are
just as fast (if not faster). It may be loaded as a Lua
module through a shared object file, or linked statically to
embed in an application.



FEATURES

The feature set is minimal. At this time, all arrays are
1-dimensional and no slicing operations are
supported. However, vectorized arithmetic operations are
fully supported, and are carried out entirely in C. Lunar
provides 7 atomic data types: char, short, int, long, float,
double, and complex. Complex values are all double
precision, and are provided by using the imaginary unit,
e.g. z = 1 + 2*lunar.I is the complex number (1,2).

Unlike Lua tables with numeric keys, lunar arrays start from
index 0. This is to be consistent with C, python, and
numpy. The Luar C API provides functions for pushing new
lunar arrays onto the stack, and obtaining them from the
stack.



INSTALLATION

make
make tests
make install

TO specify the location of Lua header and library files, put
LUA_HOME=/path/to/lua at the end of the make command. 'make
install' creates lib and include directories locally. To
specify a different location, use
INSTALL_TOP=/path/to/lunar. To load lunar as a Lua
extension, set the environment variable as follows:

export LUA_CPATH=/path/to/lunar/lib/?.so



